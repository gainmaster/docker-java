#!/usr/bin/env bash

set -x              # Print command traces before executing command
trap 'exit 1' ERR   # Exit script with error if command fails

# Validate that docker exists
if [[ -z $(which docker) ]]; then
    echo "Missing docker client which is required for building, testing and pushing."
    exit 2
fi

# Validate that bats exists
if [[ -z $(which bats) ]]; then
    echo "Missing bats, which is required for testing."
    exit 2
fi

# If script is not executed as root user, docker needs sudo
if [[ $EUID -ne 0 ]]; then
    alias docker='sudo docker'
fi

# Set working directory to project root
cd $(dirname "${BASH_SOURCE[0]}")


declare IMAGE_NAME="bachelorthesis/java"
declare VERSIONS_DIRECTORY="./version"


function build {
    version="${1}"
    version_directory="${VERSIONS_DIRECTORY}/${version}"

    if [ ! -d "$version_directory" ]; then
        exit 1;
    fi

    while read tag; do
            docker build -t "${IMAGE_NAME}:${tag}" $version_directory
    done < "${version_directory}/tags"
}


function test {
    version="${1}"
	docker history "${IMAGE_NAME}:${version}" 2> /dev/null

    if [ $? -eq 1 ]; then
        echo "Cant test ${IMAGE_NAME}:${version}, the image does not exist."
        exit 2
    fi

    bats "./test/${version}.bats"   
}

function push {
	tag="${1}"
    docker history "${IMAGE_NAME}:${tag}" 2> /dev/null

    if [ $? -eq 1 ]; then
        echo "Cant push ${IMAGE_NAME}:${tag}, the image does not exist."
        exit 2
    fi

    [ -z "$DOCKER_EMAIL" ]    && { echo "Need to set DOCKER_EMAIL";    exit 1; }
    [ -z "$DOCKER_USER" ]     && { echo "Need to set DOCKER_USER";     exit 1; }
    [ -z "$DOCKER_PASSWORD" ] && { echo "Need to set DOCKER_PASSWORD"; exit 1; }

    sudo docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
    sudo docker push "${IMAGE_NAME}:${tag}"
}

versions=()

while getopts ":v:" opt; do
  case $opt in
    v)
      versions+=("$OPTARG") >&2
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

if [ ${#versions[@]} -eq 0 ]; then
    for version in ${VERSIONS_DIRECTORY}/*; do
        versions+=($(basename $(echo $version)))
    done
fi

actions=("$@")
if [ ${#actions[@]} -eq 0 ]; then
    actions=(build test push)
fi

for action in "${actions[@]}"; do 
    case "$action" in
        build)
            for version in "${versions[@]}"; do
               build $version
            done
            ;;
         
        test)
            for version in "${versions[@]}"; do
               test $version
            done
            ;;

        push)
            for version in "${versions[@]}"; do
               push $version
            done
            ;;
    esac
done
